/** 
 * @author RadialSpark, Bradley Wong
 * @description Trigger handler for Opportunity
 * @history
 *  06-27-2018 - Bradley Wong - created
 *  06-28-2018 - Bradley Wong - added updateQuotePromotion()
 *  06-29-2018 - Bradley Wong - added updateOpportunityProductPromotionDiscount()
 *  08-20-2018 - Bradley Wong - refactored setPricebookBasedOnEnrollment() to filter by Rollup_Children__c and use ParentAccount.Parent_Enrollment__c value
 *  09-20-2018 - Bradley Wong - add createRenewalOpportunityAndLineItems()
 */

public class OpportunityTriggerHelper {
	public static final String NO_ACCOUNT_ERROR = 'Please select an account.';
	public static final String NO_PARENT_ENROLLMENT_ERROR = 'Please make sure that the associated account has a valid Parent Enrollment value (with a relevant Pricebook for the enrollment range).';

	public static final String CLOSED_WON = 'Closed Won';
	public static final String RENEWAL_RECORD_TYPE = 'Renewal';
	private static final String STAGE_NAME_RENEWAL_QUEUE = 'Renewal Queue';

	public void doBeforeInsert(List<Opportunity> triggerNew) {
		setPricebookBasedOnEnrollment(triggerNew);
	}

	public void doAfterUpdate(Map<Id, Opportunity> oldMap, Map<Id, Opportunity> newMap) {
        //collect opportunities whose Promotion__c values have changed
		Map<Id, Opportunity> oppsWithUpdatedPromotion = new Map<Id, Opportunity>();
		for (Id oppId : newMap.keySet()) {
			if (oldMap.get(oppId).Promotion__c != newMap.get(oppId).Promotion__c) {
				oppsWithUpdatedPromotion.put(oppId, newMap.get(oppId));
			}
		}

		updateQuotePromotion(oppsWithUpdatedPromotion);
		updateOpportunityProductPromotionDiscount(oppsWithUpdatedPromotion);

		
		createRenewalOpportunityAndLineItems(oldMap, newMap);
	}

	/**
	 * @description whenever an Opportunity is created, its Pricebook2Id should be
	 *  updated based on the Opportunity.Enrollment__c value when the Opportunity.IsClosed == false
	 */
    @TestVisible
    private void setPricebookBasedOnEnrollment(List<Opportunity> triggerNew) {	

		//isolate relevant account Ids from triggerNew
		Set<Id> accountIds = new Set<Id>();
		List<Opportunity> oppsWithAccount = new List<Opportunity>();
		for (Opportunity opp : triggerNew) {

			//throw error if the opp does not have an account
			if (opp.AccountId == null) {
				opp.addError(NO_ACCOUNT_ERROR); 
			}

			//else collect opp.AccountId
			else {
				accountIds.add(opp.AccountId);
				oppsWithAccount.add(opp);
			}
			
		}

		//query for enrollments for the relevant accounts 
		Map<Id, Account> accountMap = new Map<Id, Account>([
			SELECT
				Id,
				ParentId,
				Enrollment__c, 
				Parent_Enrollment__c
			FROM Account
			WHERE Id IN :accountIds
		]);

		//create map of opportunity Id to enrollment value
		Map<Id, Decimal> oppIdToEnrollment = new Map<Id, Decimal>();
		for (Opportunity opp : oppsWithAccount) {

			//only change the pricebook value if the opp is not closed
			if (!opp.isClosed) {
				//get the opp's account
				Account oppAccount = accountMap.get(opp.AccountId);

				//the enrollment value (for this opp) that will be used to assign pricebook2Id to the opp
				Decimal enrollment;
				//if the account has a parent id ==> use the parent enrollment value
				if (oppAccount.Parent_Enrollment__c != null) {
					if (oppAccount.Parent_Enrollment__c < 0) {
						opp.addError(NO_PARENT_ENROLLMENT_ERROR);
					}
					enrollment = oppAccount.Parent_Enrollment__c;
				}
				//else ==> use the opp's account's enrollment value
				else {
					enrollment = oppAccount.Enrollment__c;
				}
				oppIdToEnrollment.put(opp.Id, enrollment);
			}

		}

		//only set the pricebook2Id if there are open opps in triggerNew
		if (oppIdToEnrollment.values().size() > 0) {
			//create list of enrollment values to sort
			List<Decimal> enrollments = oppIdToEnrollment.values();
			//sort the enrollment values ASC for Pricebook2 query
			enrollments.sort();

			//query for all pricebooks with relevant enrollment ranges
			List<Pricebook2> pricebooks = [
				SELECT
					Id,
					Minimum_Enrollment__c,
					Maximum_Enrollment__c
				FROM Pricebook2
				WHERE Minimum_Enrollment__c <= :enrollments[0]
				AND Maximum_Enrollment__c >= :enrollments[enrollments.size() - 1]
			];
	
			//set the pricebook id with the appropriate pricebook
			for (Opportunity opp : triggerNew) {
				Decimal thisEnrollment = oppIdToEnrollment.get(opp.Id);

				//if the opportunity in triggerNew is closed ==> continue
				if (thisEnrollment == null) continue;

				//search through the queried pricebooks to find the appropriate one for thisEnrollment value
				for (Pricebook2 pb : pricebooks) {
					if (thisEnrollment >= pb.Minimum_Enrollment__c && thisEnrollment <= pb.Maximum_Enrollment__c) {	
						opp.Pricebook2Id = pb.Id;
						
						break;
					}
				}
				
				if (opp.Pricebook2Id == null) opp.addError(NO_PARENT_ENROLLMENT_ERROR);
			}
		}

	}

	/**
	 * @description whenever a Opportunity.Promotion__c value is updated ==> update its Quote.Promotion__c value
	 */
    @TestVisible
    private void updateQuotePromotion(Map<Id, Opportunity> oppsWithUpdatedPromotion) {

		//query for related quotes who are syncing with the opps
		List<Quote> quotesForThisOpp = [
			SELECT
				Id,
				IsSyncing,
				Promotion__c,
				OpportunityId
			FROM Quote
			WHERE OpportunityId IN :oppsWithUpdatedPromotion.keySet()
			AND IsSyncing = TRUE
		];

		//update the quote.Promotion__c values with those on the updated opps
		List<Quote> updatedQuotes = new List<Quote>();
		for (Quote q : quotesForThisOpp) {
			
			q.Promotion__c = oppsWithUpdatedPromotion.get(q.OpportunityId).Promotion__c;
			updatedQuotes.add(q);

		}

		update updatedQuotes;
	}
	
    
    /**
     * @description this method is responsible for renewing opportunities 
     * and opportunity line items when a contract is not attached
     * #####################FLOW FLOW FLOW FLOW FLOW FLOW##############################
     */
    @TestVisible
    private void createRenewalOpportunityAndLineItemsFlow(Set<Id> oppIds) {
        
        Id renewalRecordTypeId = this.getRecordTypeId(RENEWAL_RECORD_TYPE);
        List<Opportunity> newOppsToInsert = new List<Opportunity>();
        List<OpportunityLineItem> newOppLineItems = new List<OpportunityLineItem>();
        Map<Id, Opportunity> oldOppId_newOpp = new Map<Id, Opportunity>();
        
        //query all opportunites and children in the trigger context
        List<Opportunity> closedOpps = [SELECT
                                       		Id, 
                                       		AccountId,
                                       		CloseDate,
                                       		Name,
                                       		OwnerId,
                                       		Pricebook2Id,
                                       		Contract_Signer__c,
                                       		Decision_Maker__c,
                                       		Product__c,
                                       		School_Type__c,
                                       		Term_Start_Date__c,
                                       		Term_End_Date__c,
                                       		Term_of_Service__c,
                                       		End_Date__c,
                                       		Initial_Demo_Date__c,
                                       		Evergreen__c,
                                       		Next_Term_Amount__c,
                                       		Primary_Contact__c,
                                       		ContractId,
                                       		MSA__c,
                                        (SELECT 
                                        	ListPrice,
                                        	Name,
                                        	PricebookEntryId,
                                        	Product2Id,
                                        	ProductCode,
                                        	Quantity,
                                        	TotalPrice,
                                        	UnitPrice
                                        	FROM OpportunityLineItems
                                        	WHERE Recurring__c = True)
                                       FROM Opportunity
                                       WHERE Id IN :oppIds];
        
        
        
        for(Opportunity closedOpp: closedOpps) {
            
            
            List<OpportunityLineItem> closedLineItems = closedOpp.OpportunityLineItems;
            if(closedLineItems.size() == 0) {
                //the opportunity in question has no opp line items; disregard
                continue;
            }
 
            Date NewTermStartDate = closedOpp.Term_End_Date__c + 1;
            Date NewCloseDate = NewTermStartDate - 60;
            Date NewTermEndDate = NewTermStartDate.addYears(1).addDays(-1);
            
            //naming convention
            String oldName = closedOpp.Name;
            String newName = null;
            
            if(oldName.contains('Term')) {
                //then get the number of the renewal term and add
                List<String> splitByTerm = oldName.split('Term ');
                Integer nextRenewal = Integer.valueOf(splitByTerm[1]) + 1;
                newName = splitByTerm[0] + ' Term ' + nextRenewal;
                
                
            } else {
                newName = oldName + ' - Term 2';
            }
			
            Opportunity newOpp = new Opportunity();
            	newOpp.RecordTypeId = renewalRecordTypeId;
            	newOpp.AccountId = closedOpp.AccountId;
            
            	newOpp.CloseDate = NewCloseDate;
            	newOpp.StageName = STAGE_NAME_RENEWAL_QUEUE;
            	newOpp.Pricebook2Id = closedOpp.Pricebook2Id;	
            	newOpp.Name = newName;
				newOpp.Type = 'Existing Business';
				newOpp.Evergreen__c = closedOpp.Evergreen__c;
				newOpp.Term_End_Date__c = NewTermEndDate;
				newOpp.OwnerId = closedOpp.OwnerId;
				newOpp.Primary_Contact__c = closedOpp.Primary_Contact__c;
				newOpp.Previous_Opportunity__c = closedOpp.Id;
				newOpp.Term_Start_Date__c = NewTermStartDate;
				newOpp.Previous_Contract__c = closedOpp.ContractId;
				newOpp.ContractId = closedOpp.ContractId;
				newOpp.MSA__c = closedOpp.MSA__c;
            
            	newOppsToInsert.add(newOpp);
            
            oldOppId_newOpp.put(closedOpp.Id, newOpp);
            
        }
        
        insert newOppsToInsert;
        
        for(Opportunity closedOpp: closedOpps) {
            if(!oldOppId_newOpp.containsKey(closedOpp.Id)) {
                continue;
            }
            List<OpportunityLineItem> closedLineItems = closedOpp.OpportunityLineItems;
            Id newOppId = oldOppId_newOpp.get(closedOpp.Id).Id;
            Decimal nextYearAmount = closedOpp.Next_Term_Amount__c;
            
            
            for(OpportunityLineItem oli: closedLineItems) {
                OpportunityLineItem newOli = new OpportunityLineItem();
    			newOli.PricebookEntryId = oli.PricebookEntryId;
    			newOli.Product2Id = oli.Product2Id;
    			//newOli.ProductCode = oli.ProductCode;
    			newOli.TotalPrice = oli.TotalPrice;
    			newOli.Quantity = oli.Quantity;
    			newOli.TotalPrice = oli.TotalPrice;
    			newOli.OpportunityId = newOppId;
                
                if(nextYearAmount > 0) {
                    //yes
                    newOli.TotalPrice = nextYearAmount;
                }
                
                newOppLineItems.add(newOli);
            }
            
        }
		       
        insert newOppLineItems;
        
        
        
        
    }
    
	/**
	 * @description whenever a Opportunity.Promotion__c value is updated ==> update its OpportunityLineItems.Original_Promotion__c
	 */
    @TestVisible
    private void updateOpportunityProductPromotionDiscount(Map<Id, Opportunity> oppsWithUpdatedPromotion) {
		//query for Promotion Discount and Opportunity.OpportunityLineItems
		List<Opportunity> oppWithOppLineItems = [
			SELECT
				Id,
				Promotion__c,
				Promotion__r.Discount__c,
				(
					SELECT
						Id, 
						Original_Promotion_Discount__c
					FROM OpportunityLineItems
				)
			FROM Opportunity
			WHERE Id IN :oppsWithUpdatedPromotion.keySet()
		];

		//update the Original_Promotion_Discount__c value on each opp's opp line items
		List<OpportunityLineItem> updatedOppLineItems = new List<OpportunityLineItem>();
		for (Opportunity opp : oppWithOppLineItems) {
			
			if (opp.Promotion__c != null) {
				for (OpportunityLineItem oli : opp.OpportunityLineItems) {
					oli.Original_Promotion_Discount__c = opp.Promotion__r.Discount__c;

					updatedOppLineItems.add(oli);
				}
			}

		}

		update updatedOppLineItems;
	}

	/**
	 * @description When a user closed won an opp, another opp should be created with the same products.  
	 *  Prices in the new opp, should either follow contract prices or the standard pricebook
	 */
	// collect ids of opportunities that have already run through the trigger to prevent duplicate renewal creation
	private static Set<Id> processedClosedWonOpps = new Set<Id>();
	
    @TestVisible
	private void createRenewalOpportunityAndLineItems(Map<Id, Opportunity> oldMap, Map<Id, Opportunity> newMap) {
        //create map of the OpportunityName to highest Renewal Number
		Map<String, Integer> existingRenewalOppNames = this.getExistingRenewalOpportunityNames(newMap.values());

		/* ----- COLLECT OPPORTUNITIES WHOSE STAGENAME HAS BEEN CHANGED TO CLOSED WON ----- */
		//collect opportunity ids from this execution context
		Set<Id> flowOppIds = new Set<Id>();
        Set<Id> notFlowOppIds = new Set<Id>();
		Set<Id> oppIds = new Set<Id>();
		//collect map of opp ids to related contact ids
		Set<Id> contractIds = new Set<Id>();
		for (Id oppId : newMap.keySet()) {
			String oppName = newMap.get(oppId).Name;
			//split the name of the opportunity by Term ==> can either be a 
			List<String> oppNameSplit = oppName.split(' Term ');

			//default to not creating a renewal opportunity
			Boolean createRenewalOpp = false;
			//if the opp in the trigger context is New Business and there aren't any renewal opportunities for it ==> create new renewal opp
			if (oppNameSplit.size() == 1 && existingRenewalOppNames.get(oppName) == 1) {
				createRenewalOpp = true;
			}
			//else if this opp is the latest renewal opp ==> create new opp
			else if (oppNameSplit.size() == 2) {
				String oppNameBase = oppNameSplit[0].split(' - ')[0];
				Integer thisRenewalCount = Integer.valueOf(oppNameSplit[1]);
				
				//if this opp is the latest Renewal Opp ==> allow creation of new Renewal Opp
				createRenewalOpp = thisRenewalCount == existingRenewalOppNames.get(oppNameBase);	
			}

			//only collect opp ids for opps whose stage name has been changed to CLOSED WON, the trigger in context is last renewal opp,
			// and the opportunity hasn't already been processed in this context
			if (
				oldMap.get(oppId).Approved__c == false && 
				newMap.get(oppId).Approved__c == true &&
				createRenewalOpp &&
				!processedClosedWonOpps.contains(oppId)
			) {
				
                //collect opp id
				oppIds.add(oppId);
				//collect related contract ids
				Id contractId = newMap.get(oppId).ContractId;
				
				if (contractId != null) {
                    contractIds.add(contractId);
                    notFlowOppIds.add(oppId);
                } else {
                    flowOppIds.add(oppId);
                    
                }

				//collect id of handled opportunity
				
				processedClosedWonOpps.add(oppId);
			}
		}

        //call for renewal through old flow logic
          
        createRenewalOpportunityAndLineItemsFlow(flowOppIds);
        
		
		/* ----- QUERY FOR RELATED OBJECTS ----- */
		//query for newly closed won opportunities / their line items for relevant opps
	
        
		Map<Id, Opportunity> previousOppMap = this.getOpportunities(notFlowOppIds);
        

		//query for contracts relevant to the collected opps
		Map<Id, Contract> contracts = this.getContracts(contractIds);

		//set of pricebook and product ids used to query for relevant pricebook entries
		Set<Id> pricebookIdsAndProductIds = new Set<Id>();
		//map of (pricebookId + productId) : List of opp line items ==> the pricebookId + productId string is used as a unique key for matching
		//  the opp line item to a pricebook entry
		Map<String, List<OpportunityLineItem>> pricebookIdAndProductIdToNewOppLineItems = new Map<String, List<OpportunityLineItem>>();

		//collect map of opp id + product in this opportunity to the opp's contract price
		Map<String, Contract_Price__c> oppIdAndProductIdToContractPrice = new Map<String, Contract_Price__c>();

		/* ----- CREATE NEW RENEWAL OPPORTUNITIES ----- */
		//create and insert new opportunities with a record type of Renewal
		Map<Id, Opportunity> renewalOpps = this.createRenewalOpportunities(previousOppMap.values(), existingRenewalOppNames);
		//loop through the new renewal opps to create new opp line items
		for (Opportunity renewalOpp : renewalOpps.values()) {
			//the previous opportunity (that the renewal opp was created from)
			Opportunity previousOpp = previousOppMap.get(renewalOpp.Previous_Opportunity__c);
			//get the contract associated with the previous opportunity
			Contract contract = contracts.get(previousOpp.ContractId);
			//CODE REVIEW 
			//if a contract exists for the previous opp and the opp's close date falls within the contract's term ==> use contract price
			if (
				contract != null &&
				((previousOpp.CloseDate >= contract.StartDate &&  
				previousOpp.CloseDate <= contract.EndDate) || previousOpp.Evergreen__c)
			) {
                //collect contract prices for specific opp id / product id combinations
				for (Contract_Price__c contractPrice : contract.Contract_Prices__r) {
					//the renewal opp id and product id used as a unique key to set contract prices on opp line items
					String oppIdAndProductId = String.valueOf(renewalOpp.Id) + String.valueOf(contractPrice.Product__c);
					//collect the contract prices
					oppIdAndProductIdToContractPrice.put(oppIdAndProductId, contractPrice);
				}
			}

			//loop through opp line items from previous opp for creation in new opp
			for (OpportunityLineItem previousOli : previousOpp.OpportunityLineItems) {
                //if the term end date of the opportunity is different than that of the opportunity product ==> do not create opp line item
				if (previousOli.Term_End_Date__c != previousOpp.Term_End_Date__c) continue;
				
				//the product id for this opportunity line item
				Id productId = previousOli.Product2Id;
				pricebookIdsAndProductIds.add(productId);
				//the pricebook id relevant to this renewal opportunity (set by another trigger)
				Id pricebookId = renewalOpp.Pricebook2Id;
				pricebookIdsAndProductIds.add(pricebookId);

				//build opp line item from previous opp and previous opp line item
				pricebookIdAndProductIdToNewOppLineItems = this.createOpportunityLineItem(renewalOpp, previousOli, pricebookIdAndProductIdToNewOppLineItems);
			}
		}

		//collect new opp line items
		List<OpportunityLineItem> newOppLineItems = new List<OpportunityLineItem>();
		//query for relevant pricebook entries
		List<PricebookEntry> pricebookEntries = this.getPricebookEntries(pricebookIdsAndProductIds);
		//set pricebook entry ids to opportunity line item
		//CODE REVIEW
		Set<Opportunity> removeContractIdOpps = new Set<Opportunity>();
        
        for (PricebookEntry pbe : pricebookEntries) {
			//create same unique key to get pricebook entries relevant to this pricebook entry
			String pricebookIdAndProductId = String.valueOf(pbe.Pricebook2Id) + String.valueOf(pbe.Product2Id);

			//loop through the opp line items with this pricebook / product combination
			for (OpportunityLineItem oli : pricebookIdAndProductIdToNewOppLineItems.get(pricebookIdAndProductId)) {
				//set the pricebook entry id of this opp line item
				oli.PricebookEntryId = pbe.Id;
				
				//create unique key of opp id to product id to get & set the contract price if it exists
				String oppIdAndProductId = String.valueOf(oli.OpportunityId) + String.valueOf(pbe.Product2Id);
				
				//contract price object for this opp line item
				Contract_Price__c contractPrice = oppIdAndProductIdToContractPrice.get(oppIdAndProductId);
				//CODE REVIEW
				//if the related contract has a valid contract price for this product ==> set the price	
				if (
					contractPrice != null &&
					((oli.Term_Start_Date__c >= contractPrice.Term_Start_Date__c &&
					oli.Term_End_Date__c <= contractPrice.Term_End_Date__c) || renewalOpps.get(oli.OpportunityId).Evergreen__c)
				) { 
                    oli.TotalPrice = contractPrice.Price__c;
				}
				//else ==> set the total price to the unit price * quantity
				else {
					oli.TotalPrice = pbe.UnitPrice * oli.Quantity;
                    Opportunity parentOpp = renewalOpps.get(oli.OpportunityId);
                    parentOpp.ContractId = null;
                    removeContractIdOpps.add(parentOpp);
                    
				}

				//update the opp line item term dates
				if (oli.Term_Start_Date__c != null) oli.Term_Start_Date__c = oli.Term_Start_Date__c.addYears(1);
				if (oli.Term_End_Date__c != null) oli.Term_End_Date__c = oli.Term_End_Date__c.addYears(1);

				//collect new opp line items for insertion
				newOppLineItems.add(oli);  
			} 
		}

		//insert new opp line items
		insert newOppLineItems;
        List<Opportunity> removeContractIdOppsList = new List<Opportunity>(removeContractIdOpps);
        update removeContractIdOppsList;
	}

	/**
	 * @description Collects names of existing renewal opportunities
	 * @return {Set<String>} Set of names for existing renewal opportunities
	 */
	private Map<String, Integer> getExistingRenewalOpportunityNames(List<Opportunity> opportunities) {
		//flag to use WHERE or OR clause in dynamic soql query
		Boolean isFirstQuery = true;

		//build soql query
		String oppQuery = 'SELECT Id, Name FROM Opportunity';
		for (Opportunity opp : opportunities) {
			if (isFirstQuery) {
				oppQuery += ' WHERE ';
				isFirstQuery = false;
			}
			else {
				oppQuery += ' OR ';
			}
			oppQuery += 'Name LIKE \'%' + opp.Name.split('-')[0] + '%\'';
		}
		oppQuery += ' ORDER BY Name ASC';

		//query for existing opportunities
		List<Opportunity> existingRenewalOpps = (List<Opportunity>)Database.query(oppQuery);

		//build map of opportunity base name (the name of the original New Business opp) to the highest renewal number
		Map<String, Integer> oppNameToLastRenewalNum = new Map<String, Integer>();
		for (Opportunity opp : existingRenewalOpps) {
			//Example Renewal Opp Name ==> OpportunityName - Renewal Term 1
			List<String> oppNameSplit = opp.Name.split(' Term ');
			//if the opp is a New Business opp ==> renewal count is 0
			if (oppNameSplit.size() == 1) {
				oppNameToLastRenewalNum.put(opp.Name, 1);
			}
			//else ==> check if this renewal number is higher than current value in map && update map
			else {
				//Ex. OpportunityName
				String oppNameBase = oppNameSplit[0].split(' - ')[0];
				//Ex. 1
				Integer thisRenewalCount = Integer.valueOf(oppNameSplit[1]);

				if (!oppNameToLastRenewalNum.containsKey(oppNameBase)) {
					oppNameToLastRenewalNum.put(oppNameBase, thisRenewalCount);
				}
				else if (oppNameToLastRenewalNum.get(oppNameBase) < thisRenewalCount) {
					oppNameToLastRenewalNum.put(oppNameBase, thisRenewalCount);
				}
			}
		}
		return oppNameToLastRenewalNum;
	}

	/**
	 * @description Creates and inserts renewal opportunities from Closed Won Opportunities in trigger context
	 * @return {List<Opportunity>} new renewal opps 
	 */
	//CODE REVIEW
	private Map<Id, Opportunity> createRenewalOpportunities(List<Opportunity> previousOpportunities, Map<String, Integer> existingRenewalOppNames) {
		if (previousOpportunities.size() == 0) return new Map<Id, Opportunity>();

        //query for the Id of the Opportunity Record Type: 'Renewal'
        Id renewalRecordTypeId = this.getRecordTypeId(RENEWAL_RECORD_TYPE);            

		//create list of renewal opportunities that will be inserted
		List<Opportunity> renewalOpps = new List<Opportunity>();
		for (Opportunity opp : previousOpportunities) {
			List<String> oppNameSplit = opp.Name.split(' Term ');

			String oppNameBase = oppNameSplit[0].split(' - ')[0];
			Integer nextRenewalCount = existingRenewalOppNames.get(oppNameBase) + 1;

			//create new opp with the same account, the record type of Renewal, and the previous opp set
			Date newStartDate = opp.Term_End_Date__c.addDays(1);
			Opportunity newOpp = new Opportunity(
				Name = buildRenewalOppName(oppNameBase, nextRenewalCount),
				StageName = STAGE_NAME_RENEWAL_QUEUE,
				Term_Start_Date__c = newStartDate,
				Term_End_Date__c = newStartDate.addYears(1).addDays(-1),
				CloseDate = newStartDate.addDays(-60),
				AccountId = opp.AccountId, 
				RecordTypeId = renewalRecordTypeId, 
				Previous_Opportunity__c = opp.Id,
                Previous_Contract__c = opp.ContractId,
				ContractId = opp.ContractId,
                Evergreen__c = opp.Evergreen__c
			);
			renewalOpps.add(newOpp); 
		}

		//insert the new renewal opps
		insert renewalOpps;

		//collect the newly inserted opp ids for next query
		Set<Id> renewalOppIds = new Set<Id>();
		for (Opportunity opp : renewalOpps) renewalOppIds.add(opp.Id);

		//query for opportunities to get Pricebook2Id (which is set in an Opportunity after insert trigger)
		return this.getOpportunities(renewalOppIds); 
	}

	/**
	 * @description Builds OpportunityLineItem
	 * @return {Map<String, List<OpportunityLineItem>>} Map of unique string to new opportunity line items 
	 */
	private Map<String, List<OpportunityLineItem>> createOpportunityLineItem(Opportunity renewalOpp, OpportunityLineItem previousOli, Map<String, List<OpportunityLineItem>> pricebookIdAndProductIdToNewOppLineItems) {
		//create a new opp line item
		OpportunityLineItem newOli = new OpportunityLineItem(
			OpportunityId = renewalOpp.Id,
			Quantity = previousOli.Quantity, 
			//temporarily set the start and end dates to the previous opp line item for future contract price checks
			//	==> will be updated to new term when setting opp line item total price
			Term_Start_Date__c = previousOli.Term_Start_Date__c,
			Term_End_Date__c = previousOli.Term_End_Date__c
		);

		//the pricebook id and product id used as a unique string to relate opp line items to pricebook entries
		String pricebookIdAndProductId = String.valueOf(renewalOpp.Pricebook2Id) + String.valueOf(previousOli.Product2Id);
		//collect opp line items in map
		if (!pricebookIdAndProductIdToNewOppLineItems.containsKey(pricebookIdAndProductId)) pricebookIdAndProductIdToNewOppLineItems.put(pricebookIdAndProductId, new List<OpportunityLineItem>());
		pricebookIdAndProductIdToNewOppLineItems.get(pricebookIdAndProductId).add(newOli);

		return pricebookIdAndProductIdToNewOppLineItems;
	}

	/** 
	 * @description Builds the Opportunity name for the renewal opp
	 * @return {String} name 
	 */
	private String buildRenewalOppName(String previousOppName, Integer termNum) {
		//Generic Name Format: OpportunityName - Renewal Term 1
		return previousOppName + ' - Term ' + termNum;
	}

	/**
	 * @description Gets opportunities
	 * @return {Map<Id, Opportunity>} Map of opportunities
	 */
	 //CODE REVIEW
	private Map<Id, Opportunity> getOpportunities(Set<Id> oppIds) {
		if (oppIds.size() == 0) return new Map<Id, Opportunity>();
        
		Map<Id, Opportunity> opps = new Map<Id, Opportunity>([
			SELECT
				Id,
				Name,
				CloseDate,
				AccountId,
				StageName, 
				ContractId,
				Pricebook2Id,
				Term_End_Date__c,
				Previous_Opportunity__c,
            	Evergreen__c,
				(
					SELECT
						Id,
						Quantity,
						Product2Id,
						TotalPrice,
						PricebookEntryId,
						Term_Start_Date__c,
						Term_End_Date__c
					FROM OpportunityLineItems
				)
				FROM Opportunity opp
				WHERE Id IN :oppIds
		]);
        
        return opps;
	}

	/**
	 * @description Gets contracts
	 * @return {Map<Id, Contract>} Map of contracts 
	 */
	private Map<Id, Contract> getContracts(Set<Id> contractIds) {
		if (contractIds.size() == 0) return new Map<Id, Contract>();
        
		return new Map<Id, Contract>([
			SELECT
				Id,
            	StartDate,
            	EndDate,
				//Term_Start_Date__c,
				//Term_End_Date__c,
				(
					SELECT
						Id,
						Price__c,
						Product__c,
						Contract__c,
						Term_Start_Date__c,
						Term_End_Date__c
					FROM Contract_Prices__r
				)
			FROM Contract
			WHERE Id IN :contractIds
		]);
	} 

	/**
	 * @description Gets the record type id for Renewal Opportunities
	 * @return {Id} RecordTypeId
	 */
	private Id getRecordTypeId(String recordTypeName) {
		return [
			SELECT
				Id,
				Name
			FROM RecordType
			WHERE Name = :recordTypeName
			LIMIT 1
		].Id;
	}

	/**
	 * @description Queries for pricebook entries related to the pricebook and products in trigger context
	 * @return {List<PricebookEntry>} List of relevant pricebook entries 
	 */
	private List<PricebookEntry> getPricebookEntries(Set<Id> pricebookIdsAndProductIds) {
		if (pricebookIdsAndProductIds.size() == 0) return new List<PricebookEntry>();
        
		return [
			SELECT
				Id,
				UnitPrice,
				Product2Id,
				Pricebook2Id
			FROM PricebookEntry
			WHERE Pricebook2Id IN :pricebookIdsAndProductIds
			AND Product2Id IN :pricebookIdsAndProductIds
		];
	}
	
}